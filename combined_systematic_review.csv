Title,Authors,Abstract,Type of Publication,Relevance to Criteria,Inclusion Decision,Justification,Year,Magazine or Conference,Keywords,URL,,,,,,,
Mutation Operators for Specifications,"Paul E. Black, Vadim Okun, Yaacov Yesha","This paper explores a novel method using a combination of model checking and mutation analysis to automatically generate complete test suites from formal specifications. It defines a wide array of mutation operators for specification-based testing, evaluates their effectiveness in revealing faults, and recommends sets of mutation operators for cost-effective test coverage.",Scientific Paper,1.3,Include,"The paper discusses mutation testing strategies by defining mutation operators and evaluating their effectiveness, which aligns with criteria 1 and 3 focused on mutation testing strategy and effectiveness. However, it does not directly deal with security evaluation of applications, focusing instead on testing and verification from a formal specification perspective, still fitting broadly into mutation testing considerations that contribute to systematic reviews.",2000,IEEE,"Mutation Testing, Model Checking, Specification-Based Testing, Fault Detection, Mutation Operators",https://doi.org/10.1109/HASE.2000.266894,,,,,,,
Testing RESTful APIs: A Survey,"Amid Golmohammadi, Man Zhang, Andrea Arcuri","In industry, RESTful APIs are widely used to build modern Cloud Applications. Testing them is challenging because they rely on network communications and deal with external services like databases. Therefore, there has been a large amount of research sprouting in recent years on how to automatically verify this kind of web services. In this paper, we present a comprehensive review of the current state-of-the-art in testing RESTful APIs, based on the analysis of 92 scientific articles. These articles were gathered by utilizing search queries formulated around the concept of RESTful API testing, on seven popular databases. We eliminated irrelevant articles based on our predefined criteria and conducted a snowballing phase to minimize the possibility of missing any relevant paper. This survey categorizes and summarizes the existing scientific work on testing RESTful APIs and discusses the current challenges in the verification of RESTful APIs. This survey clearly shows an increasing interest among researchers in this field, from 2017 onward. However, there are still a lot of open research challenges to overcome.",Journal Article,"This paper primarily focuses on testing RESTful APIs, including techniques and challenges associated with the testing of these APIs but does not explicitly discuss mutation testing strategies or measure mutation testing effectiveness. Although it mentions testing effectiveness indirectly, it does not fully align with mutation testing or application security evaluation for inclusion.",No,"The document is a survey on testing RESTful APIs, which includes the analysis of existing approaches and tools, but it does not directly address any mutation testing strategies, security evaluations, or measurements of mutation testing effectiveness specifically. Thus, it does not meet the criteria for inclusion despite its relevance to software testing in a broader sense.",2023,ACM Transactions on Software Engineering and Methodology,"survey, literature review, REST, API, testing, test case generation, fuzzing, web service",https://doi.org/10.1145/3617175,,,,,,,
Using a Model Checker to Test Safety Properties,"Paul Ammann, Wei Ding, Daling Xu","This paper presents a method for utilizing model checking to support the testing process in safety-critical systems. Specifically, the authors focus on using model checkers to both generate and evaluate test sets relative to safety properties that are specified in temporal logic. They introduce a novel approach that involves formalizing dangerous actions through mutation models for model checking specifications. The approach is demonstrated through case studies involving realistic systems, such as traffic collision and avoidance systems and flight guidance systems. The authors propose coverage criteria based on computational tree logic, illustrating the feasibility of their approach with a cruise control system example.",Scientific Paper,"The paper discusses mutation models and accompanying criteria to evaluate and generate test sets which align with measurement of mutation testing effectiveness. However, it primarily emphasizes safety property testing rather than security evaluations of applications.",Include,The paper should be included because it addresses the mutation testing strategy and measures the effectiveness of mutation testing through its exploration of coverage criteria and formal methods. It does not directly evaluate application security but covers two significant criteria for inclusion.,2001,IEEE,"Model checking, Mutation analysis, Software testing, Safety",https://doi.org/10.1109/32.935854,,,,,,,
Web Mutation Testing,Upsorn Praphamontripong,,Conference Paper,"The paper addresses mutation testing strategies for web applications, clearly focusing on designing web mutation operators, conducting empirical evaluations, and measuring mutation testing effectiveness for web applications. Therefore, it is highly relevant to the criteria of mutation testing strategy and measurement of effectiveness.",Include,This paper explicitly studies the effectiveness of mutation testing strategies specifically designed for web applications. It provides a comprehensive approach to understanding and improving mutation testing through empirical evaluations. The focus on interaction faults and fault coverage measurement aligns directly with the systematic review criteria.,2012,IEEE,Mutation testing, web application, interaction faults,,,,,,
REVIEW ON MUTATION TESTING AND EXISTING TOOLS IN C#,"Radhika Thapar, Dr. Mamta Madan, Dr. Kavita","Abstract— development of new software. On the basis of Purpose –Most important and critical activity in any Literature reviewed, papers were analyzed using software development is itCs ot-eSsutipnge rvpihaso re Jaagnadn nat Nh Vu iniversporfistywa,er J a foip r uidr e n tifying most frequently used findings: • Mutation testing is a unique and effective testing tool which gives full guarantees of the quality of software product. Keywords: C, C#, Mutation testing, Testing, Tools",Article,"The paper discusses mutation testing strategy and reviews various tools for applying mutation testing in C and C#. It evaluates existing mutation testing systems, thus measuring their effectiveness. However, it does not focus on security evaluation of applications.",Inclusion,"The paper aligns with the criteria of a mutation testing strategy and measurement of its effectiveness. It evaluates the concept and application of mutation testing in C and C#, providing detailed reviews of tools in this domain, which can contribute significantly to a systematic review on mutation testing strategies and their effectiveness.",2020,Sambodhi,"C, C#, Mutation testing, Testing, Tools",https://www.researchgate.net/publication/349684326,,,,,,,
Exposing Library API Misuses via Mutation Analysis,"Ming Wen, Yepang Liu, Rongxin Wu, Xuan Xie, Shing-Chi Cheung, Zhendong Su","Misuses of library APIs often lead to software crashes and vulnerability issues. Existing static API misuse detectors suffer from low recall and precision. This paper proposes MUTAPI, the first approach to discovering API misuse patterns through mutation analysis. MUTAPI mimics API misuses using eight mutation operators and executes the mutants against test suites to analyze execution information. It achieves high precision and recall in discovering API misuse patterns, outperforming state-of-the-art techniques.",Conference Paper,"Mutation testing strategy, Measurement of mutation testing effectiveness",Include,"The paper focuses on leveraging mutation analysis to discover API misuses, which aligns with the criteria of mutation testing strategy and the measurement of mutation testing effectiveness. Specifically, the paper discusses a new approach to mutation testing and evaluates its effectiveness in a real-world context, which is relevant to the systematic review's criteria.",2019,IEEE,"Mutation Analysis, Library API Misuses",https://doi.org/10.1109/ICSE.2019.00093,,,,,,,
Systematic Engineering of Mutation Operators,"Pablo Gómez-Abajo, Esther Guerra, Juande Lara, Mercedes G. Merayo","In the context of software engineering, mutation consists of injecting small changes in artefacts – like models, programs, or data – for purposes like (mutation) testing, test data generation, and all sorts of search-based methods. These tasks typically require defining sets of mutation operators, which are often built ad-hoc because there is currently poor support for their development and testing. To improve this situation, we propose a methodology and corresponding tool support for the proper engineering of mutation operators. Our proposal is model-based, representing the artefacts to be mutated as models. It includes a domain-specific language to describe the mutation operators, facilities to synthesize models that can be used to test the operators, different metrics to analyze operator coverage, and services to generate operators when the coverage is insufficient. We show automated support atop the WODEL tool and illustrate its use by defining mutation operators for UML Class Diagrams.",Journal Article,1.3,Include,"The paper specifically addresses criteria 1 and 3 by proposing a methodology and tool support for the proper engineering of mutation operators, which directly relates to mutation testing strategy (criterion 1) and measures its effectiveness through operator coverage and metrics (criterion 3). The extensive discussion on mutation operators for UML Class Diagrams demonstrates its relevance and applicability to mutation testing strategies. The approach helps define, synthesize, and validate mutation operators, making it highly relevant for a systematic review focusing on mutation testing strategies and their effectiveness.",2020,Journal of Object Technology,"Model-driven engineering, model mutation, model synthesis, metrics, class diagrams, WODEL",http://dx.doi.org/10.5381/jot.2020.19.3.a5,,,,,,,
Security Testing: A Survey,"Michael Felderer, Matthias Büchler, Martin Johns, Achim D. Brucker, Ruth Breu, Alexander Pretschner","Identifying vulnerabilities and ensuring security functionality by security testing is a widely applied measure to evaluate and improve the security of software. Due to the openness of modern software-based systems, applying appropriate security testing techniques is of growing importance and essential to perform effective and efficient security testing. Therefore, an overview of actual security testing techniques is of high value both for researchers to evaluate and refine the techniques and for practitioners to apply and disseminate them. This chapter fulfills this need and provides an overview of recent security testing techniques. For this purpose, it first summarizes the required background of testing and security engineering. Then, basics and recent developments of security testing techniques applied during the secure software development life cycle, ie, model-based security testing, code-based testing and static analysis, penetration testing and dynamic analysis, as well as security regression testing are discussed. Finally, the security testing techniques are illustrated by adopting them for an example three-tiered web-based business application.",Scientific Paper,"The paper comprehensively covers security testing, its integration into the software development life cycle, and evaluation of techniques including model-based and code-based testing, which indirectly relate to the security evaluation of applications, a systematic review criterion.",Exclude,"While the paper discusses security testing techniques in detail, there is no mention of mutation testing strategies or direct measurement of mutation testing effectiveness, which are key criteria for inclusion in the systematic review.",2016,"Elsevier: Advances in Computers, Volume 101","Security Testing, Software Engineering, Secure Software Development Life Cycle, Vulnerability Identification, Penetration Testing",http://dx.doi.org/10.1016/bs.adcom.2015.11.0032,,,,,,,
"RESTful API Testing Methodologies: Rationale, Challenges, and Solution Directions","Adeel Ehsan, Mohammed Ahmad M.E. Abuhaliqa, Cagatay Catal, Deepti Mishra","Service-oriented architecture has evolved to be the backbone for large-scale integration between different applications and platforms, leading to today's cloud services. This paper identifies, analyzes, and synthesizes studies related to RESTful API testing methodologies and unit test generation, suggesting challenges and solutions involved.",Review,"The paper focuses on RESTful APIs which may involve some mutation testing strategy indirectly and discusses testing challenges and solutions, but it does not measure mutation testing effectiveness or specifically evaluate security.",Exclude,"The paper is a literature review of RESTful API testing methodologies; it broadly discusses testing challenges and solutions related to REST APIs but does not specifically address mutation testing strategies, security evaluation of applications, or the measurement of mutation testing effectiveness, as required by the inclusion criteria.",2022,Applied Sciences,auto-testcase generation, cloud services, JSON-based services, microservices, RESTful APIs, testing frameworks,https://doi.org/10.3390/app12094369,,
MobSTer: A model-based security testing framework for web applications,"Michele Peroli, Federico De Meo, Luca Viganò, Davide Guardini","Web applications have become one of the preferred means for users to perform a number of crucial and security-sensitive operations such as selling and buying goods or managing bank accounts, official documents, personal health records, and smart houses. The pervasive adoption of such web applications calls for extensive security analysis in order to avoid attacks. Penetration testing is the most common approach for testing the security of web applications, but model-based security testing has been steadily maturing into a viable alternative and/or complementary approach. Penetration testing is very efficient, but the experience of the security analyst is crucial; model-based security testing relies on formal methods, but the security analyst has to first create a suitable model of the web application. In this paper, we introduce MobSTer, a formal and flexible model-based security testing framework that contributes to filling the gap between these two security testing approaches. The main idea underlying this framework is that the use of model-checking techniques can automate the search for possible vulnerable entry points in the web application, i.e., it permits an analyst to perform security testing without missing important checks. Moreover, the framework also allows for reuse: The analyst can collect her expertise into the framework and (re)use it during future tests on possibly different web applications. We have implemented MobSTer as a prototype and applied it to test a number of case studies to assess its strength and concretely evaluate it with respect to four state-of-the-art tools normally used by penetration testers.",Research Paper,"The paper is relevant to criterion 2, security evaluation of applications, as it discusses a model-based security testing framework for web applications that assesses their security through model-checking techniques.",Exclude,"The paper focuses on a model-based security testing framework for web applications, assessing the security through model-checking techniques, and does not address mutation testing strategy or measure its effectiveness, failing the inclusion criteria.",2018,"Software Testing, Verification & Reliability","model-based testing, model-checking, security testing, web applications",https://doi.org/10.1002/stvr.1685,,,,,,,
Mutation Analysis for Security Tests Qualification,"Tejeddine Mouelhi, Benoit Baudry, Yves Le Traon",,Scientific Paper,"This paper discusses the adaptation of mutation testing for qualifying security test cases, introduces new mutation operators related to security fault models, and provides empirical evaluation of these operators, which align with all three criteria.",Include,"The paper is relevant to all three criteria specified for the systematic review. It presents a mutation testing strategy tailored to security evaluations, specifically focusing on access control policies. It also introduces a method for measuring the effectiveness of mutation testing in the security domain by ranking the difficulty of killing different mutants. This comprehensive approach to using mutation analysis for security policy implementation in software supports its inclusion.",2007,IEEE,"Mutation analysis, security policy testing, mutation operators, access control, software testing",https://doi.org/10.1109/TAIC.PART.2007.21,,,,,,,
Advanced API Security: OAuth 2.0 and Beyond - Second Edition,Prabath Siriwardena,"The book provides an in-depth and comprehensive look at API security, particularly focusing on OAuth 2.0 and related technologies. Although it covers the landscape of security strategies and best practices for APIs, it largely discusses architectural concepts and real-world implementations of OAuth 2.0, JWT, OpenID Connect, and related protocols.",Book,"The primary focus of this document is on providing security frameworks and strategies for APIs, specifically around OAuth 2.0 and related security mechanisms. It does not directly discuss mutation testing strategies, security evaluation of applications in the sense used for systematic reviews, or measurement of mutation testing effectiveness.",Exclude,"The document is primarily a technical book focused on API security, particularly detailing OAuth 2.0, JWT, and related protocols in securing API environments. While it addresses general security concerns, it does not delve into mutation testing strategies or their effectiveness in security evaluation, which are the primary criteria for inclusion in the systematic review.",2020,Apress,"API Security, OAuth 2.0, JWT, OpenID Connect, Security Strategies",https://doi.org/10.1007/978-1-4842-2050-4,,,,,,,
Using mutation to assess fault detection capability of model review,"Paolo Arcaini, Angelo Gargantini, Elvinia Riccobene","Among validation techniques, model review is a static analysis approach that can be performed at the early stages of software development, at the specification level, and aims at determining if a model owns certain quality attributes (like completeness, consistency and minimality). However, the model review capability to detect behavioural faults has never been measured. In this paper, a methodology and a supporting tool for evaluating the fault detection capability of a NuSMV model advisor are presented, which performs an automatic static model review of NuSMV models. The approach is based on the use of mutation in a similar way as in mutation testing: several mutation operators for NuSMV models are defined, and the model advisor is used to detect behavioural faults by statically analysing mutated specifications. In this way, it is possible to measure the model advisor's ability to discover faults. To improve the quality of the analysis, the equivalence between a NuSMV model and any of its mutants must be checked. To perform this task, this paper proposes a technique based on the concept of equivalent Kripke structures, as NuSMV models are Kripke structures. A number of experiments assess the fault-detecting capability, precision and accuracy of the proposed approach. Analysis of variance is used to check if the results are statistically significant. Some relationships among mutation operators and model quality attributes are also established.",Scientific Paper,"The paper presents a novel approach using mutation to evaluate the fault detection capability of a static model review, a method linked with mutation testing.",Include,"The paper directly addresses mutation testing by using mutation to assess the fault-detection capability of NuSMV models, focuses on the method's effectiveness in detecting security faults, and measures the approach through experiments and analysis. It aligns with all the criteria set for the systematic review.",2014,"SOFTWARE TESTING, VERIFICATION & RELIABILITY","mutation analysis, model review, fault detection capability, NuSMV, equivalent mutants",https://doi.org/10.1002/stvr.1530,,,,,,,
Mutation Testing Advances: An Analysis and Survey,"Mike Papadakis, Marinos Kintis, Jie Zhang, Yue Jia, Yves Le Traon, Mark Harman","Mutation testing realizes the idea of using artificial defects to support testing activities. Mutation is typically used as a way to evaluate the adequacy of test suites, to guide the generation of test cases, and to support experimentation. Mutation has reached a maturity phase and gradually gains popularity both in academia and in industry. This chapter presents a survey of recent advances, over the past decade, related to the fundamental problems of mutation testing and sets out the challenges and open problems for the future development of the method. It also collects advice on best practices related to the use of mutation in empirical studies of software testing, thus giving the reader a \mini-handbook\""-style roadmap for the application of mutation testing as experimental methodology.""",Scientific Paper,"This paper is highly relevant to Criterion 1 (Mutation testing strategy) as it provides a comprehensive survey of advancements in mutation testing, detailing its processes and tools. It touches on Criterion 3 as it discusses the measurement of test suite effectiveness using mutation scores.",Include,"The document is a scientific paper that critically reviews mutation testing strategies and evaluates their effectiveness. It details the mutation testing process and explores its applications, aligning with two of the inclusion criteria: mutation testing strategy and measurement of effectiveness. The paper's comprehensive survey of advances makes it highly relevant for systematic review.",2018,"Advances in Computers, Elsevier","Mutation testing, test suite adequacy, software testing, artificial defects",https://doi.org/10.1016/bs.adcom.2018.03.015,,,,,,,
Assessing Test Quality,David Schuler,,Dissertation,"This dissertation focuses on mutation testing, specifically addressing the issues of computing resource demands and equivalent mutants. It introduces the JAVALANCHE framework to optimize mutation testing for Java programs and proposes impact metrics to improve mutant differentiation. Although there is potential for studying test effectiveness, the paper does not delve into security evaluations of applications directly.",Include,"The dissertation provides significant insights into mutation testing strategies and effectiveness measurement, directly aligning with criteria 1 and 3 for the systematic review. It presents the JAVALANCHE framework and introduces metrics to handle equivalent mutants, which are crucial for understanding mutation testing strategies and their impact on test quality.",2011,IEEE,"Mutation testing, Software testing, Equivalent mutants, Impact metrics, JAVALANCHE, Test quality",,,,,,,,
An Analysis and Survey of the Development of Mutation Testing,"Yue Jia, Mark Harman","Mutation Testing is a fault-based software testing technique that has been widely studied for over three decades. The literature on Mutation Testing has contributed a set of approaches, tools, developments, and empirical results. This paper provides a comprehensive analysis and survey of Mutation Testing. The paper also presents the results of several development trend analyses. These analyses provide evidence that Mutation Testing techniques and tools are reaching a state of maturity and applicability, while the topic of Mutation Testing itself is the subject of increasing interest.",Scientific Paper,1.3,Include,"The paper provides a comprehensive survey on mutation testing, which is directly relevant to understanding and analyzing mutation testing strategies and their effectiveness. The historical development and empirical results discussed are crucial for systematic reviews focusing on software testing techniques. Although there is no direct discussion of security evaluations of applications, the paper's detailed analysis of mutation testing fulfills two of the three criteria stated.",2011,IEEE,"Mutation testing, Survey, Software testing, Optimization techniques",https://doi.org/10.1109/TSE.2010.62,,,,,,,
Security Testing with Fault-Models and Properties,Matthias Büchler,"Abstract—Web applications are complex and face a massive amount of sophisticated attacks. Since manually testing web applications for security issues is hard and time consuming, automated testing is preferable. In model-based testing, test cases are often generated using structural criteria. Since such test cases do not directly target security properties, this Ph.D thesis proposes to use a fault model for generating tests for web applications. Faults are represented as known source code vulnerabilities that, by using respective mutation operators at the model level, are injected into models of a System Under Validation to generate “interesting” test cases. To achieve this, advantages of penetration testing are combined with model-checkers dedicated to security analysis. To find attacks on real systems the gap between an abstract attack trace output by a model-checker and a penetration test needs to be addressed. This Ph.D thesis contributes with a semi-automatic methodology to turn abstract attack traces operational.",Conference Paper,"The paper is relevant to all criteria as it discusses a mutation testing strategy using fault-models and properties, evaluates the security of web applications, and focuses on the effectiveness of mutation testing.",Include,"The document meets the criteria for inclusion in the systematic review as it provides a detailed mutation testing strategy using semantic mutation operators, evaluates security in web applications, and discusses the measurement of mutation testing effectiveness through comparative studies and evaluation methods.",2013,IEEE,security testing, mutation testing, model checking, semi-automatic test execution,https://doi.org/10.1109/ICST.2013.74,,,,
Mutation 2000: Un ,"A. Jef (cid:11) erson O (cid:11) utt, Roland H. Untch ","ISE Department, 4A4, George Mason University, Fairfax, VA 22030-4444, USA; 703-993-1654; ofut@ise.gmu.edu ",Computer Science Conference Paper ,"The paper discusses mutation testing strategies and reviews advances aimed at reducing its computational cost. It evaluates approaches like schema-based mutation, selective mutation, and weak mutation, with a focus on making mutation testing more practical for everyday programmers. There is no direct evaluation of application security, but the document is centered around mutation testing effectiveness. ",Yes ,"This document should be included as it covers critical advancements in mutation testing strategies and measures the effectiveness of these methods, which align with the key criteria for the systematic review. Although it does not explicitly address security evaluation of applications, its contribution to mutation testing effectiveness and strategy development is significant. ",2021,George Mason University ,"Mutation testing, schema-based mutation, selective mutation, weak mutation, unit testing ",www.ise.gmu.edu/faculty/ofut/,,,,,,,
The Framework for Android Apps Testing using Mutation Technique,"Muhammad Arshad Javed, Rosziati Ibrahim, Jahari Abdul Wahab","This paper presents the framework for Android apps testing using mutation technique. A systematic comparative analysis is done based on various approaches and techniques for mutation testing. The analysis examines the development of research on this subject and its inspiring objectives and practices. Using comparative analysis, the framework exhibits that Android mutation testing can create assessment cases that are very efficient at distinguishing both naturally occurring errors and crowd-sourced errors for Android apps. The framework can be used as a basis to test the Android apps using mutation technique.",Conference Paper,"The paper is relevant to multiple criteria: it discusses mutation testing strategy, evaluates security-related issues indirectly by exploring errors and vulnerabilities, and measures mutation testing effectiveness.",Include,"The paper discusses the development of a mutation testing framework for Android applications, focusing on efficiency in identifying errors, which aligns with the mutation testing strategy. It also indirectly addresses security evaluation by identifying vulnerabilities in Android apps and measures the effectiveness of this testing method.",2020,IOP Conference Series: Materials Science and Engineering,"Mutation testing, Android apps, Security evaluation, Error assessment",https://doi.org/10.1088/1757-899X/917/1/012085,,,,,,,
What It Would Take to Use Mutation Testing in Industry—A Study at Facebook,"Moritz Beller, Chu-Pan Wong, Johannes Bader, Andrew Scott, Mateusz Machalica, Satish Chandra, Erik Meijer","Traditionally, mutation testing generates an abundance of small deviations of a program, called mutants. At industrial systems the scale and size of Facebook’s, doing this is infeasible. We should not create mutants that the test suite would likely fail on or that give no actionable signal to developers. To tackle this problem, in this paper, we semi-automatically learn error-inducing patterns from a corpus of common Java coding errors and from changes that caused operational anomalies at Facebook specifically. We combine the mutations with instrumentation that measures which tests exactly visited the mutated piece of code. Results on more than 15,000 generated mutants show that more than half of the generated mutants survive Facebook’s rigorous test suite of unit, integration, and system tests. Moreover, in a case study with 26 developers, all but two found information of automatically detected test holes interesting in principle. As such, almost half of the 26 would actually act on the mutant presented to them by adapting an existing or creating a new test. The others did not for a variety of reasons often outside the scope of mutation testing. It remains a practical challenge how we can include such external information to increase the true actionability rate on mutants.",Journal Article,"1,2,3",Include,"This paper provides a comprehensive analysis of mutation testing in an industrial setting, specifically addressing the scale issues that make traditional mutation testing infeasible at large companies like Facebook. It aligns well with the systematic review criteria as it explores a mutation testing strategy, evaluates security aspects through empirical data, and measures the effectiveness of mutation testing. The use of a real-world environment and substantial data sets further adds value to understanding the application of mutation testing in industry, making it a significant addition to the review.",2020,ESORICS (European Symposium on Research in Computer Security),"Mutation Testing, Machine Learning, Industrial Application, Security Evaluation",https://eprints.soton.ac.uk/436924/,,,,,,,
Mutation Testing Advances: An Analysis and Survey,"Mike Papadakis, Marinos Kintis, Jie Zhang, Yue Jia, Yves Le Traon, Mark Harman","Mutation testing realizes the idea of using artificial defects to support testing activities. Mutation is typically used as a way to evaluate the adequacy of test suites, to guide the generation of test cases, and to support experimentation. Mutation has reached a maturity phase and gradually gains popularity both in academia and in industry. This chapter presents a survey of recent advances, over the past decade, related to the fundamental problems of mutation testing and sets out the challenges and open problems for the future development of the method. It also collects advices on best practices related to the use of mutation in empirical studies of software testing. Thus, giving the reader a “mini-handbook”-style roadmap for the application of mutation testing as an experimental methodology.",Scientific Paper,"The paper discusses various aspects of mutation testing, including its process, effectiveness, applications, and improvements, covering the recent advances and practical advice in mutation testing. The security testing section (7.2) mentions mutation testing's application in improving non-functional properties, including security.",Include,"The paper provides a comprehensive survey of mutation testing advances, touching on relevant criteria such as mutation testing strategies and measuring mutation testing effectiveness. Although the security evaluation of applications is not the main focus, the paper does include a section on security testing, detailing its relation to mutation testing. The document's comprehensive nature on mutation testing makes it a valuable addition to the systematic review.",2018,Elsevier Inc.,"Mutation Testing, Test Automation, Software Security, Mutation Score, Empirical Study",https://doi.org/10.1016/bs.adcom.2018.03.015,,,,,,,
A Classification for Model-Based Security Testing,"Michael Felderer, Berthold Agreiter, Philipp Zech, Ruth Breu","Security testing defines tests for security requirements of software. Security requirements are non-functional, requiring different testing compared to functional requirements. Model-based testing applies model-based design to model test artifacts or automate test activities. Although model-based techniques improve security testing, systematic combinations of these two activities are rare. Like functional system models improve functional testing, risk models can enhance security testing. This paper provides an overview of existing security testing approaches and develops a novel classification for model-based security tests along dimensions of risk and automated test generation. The classification aids in determining which areas of model-based security testing are well-covered by research and practice and serves as a guideline for selecting the appropriate testing approach for specific circumstances. Based on the classification, future research directions are identified.",Article,"This paper is relevant to criteria 2 and partially to criteria 1. It focuses on security evaluation of applications via model-based security testing and touches upon partial automated test generation and risk models, aligning somewhat with mutation testing strategies by mentioning mutation processes for model testing. However, it does not focus on measuring the effectiveness of mutation testing.",Include,"The paper addresses the security evaluation of applications through a classification of model-based security testing, considering both automated test generation and risk models. It presents a promising approach for systematic security evaluation, which is valuable for a broad systematic review on security testing strategies and methodologies. Although it doesn't directly address mutation testing effectiveness, the mention of mutation-based testing approaches suggests an alignment with some aspects of mutation testing strategies, justifying its inclusion for comprehensive insights into security testing methodologies.",2011,VALID 2011: The Third International Conference on Advances in System Testing and Validation Lifecycle,"Secure Systems, Verification and Testing, Security Testing, Model-based Testing",https://www.researchgate.net/publication/267561985,,,,,,,
Mutation Testing Applied to Validate SDL Specifications,"Tatiana Sugeta, José Carlos Maldonado, W. Eric Wong","Mutation Testing is an error-based criterion that provides mechanisms to evaluate the quality of a test set and/or to generate test sets. This criterion, originally proposed for program testing, has also been applied to specification testing. In this paper, we propose the application of Mutation Testing for testing SDL specifications. We define a mutant operator set for SDL that intends to model errors related to the behavioral aspect of the processes, the communication among processes, the structure of the specification and some intrinsic characteristics of SDL. A testing strategy to apply the mutant operators to test SDL specifications is proposed. We illustrate our approach using the Alternating-Bit protocol.",Conference Paper,"The paper discusses mutation testing as a strategy and explores its effectiveness in validating SDL specifications, which is relevant to the measurement of mutation testing effectiveness. However, it does not focus on security evaluation of applications, which is another primary criterion.",Include,"The paper presents a comprehensive study on a mutation testing strategy specifically for SDL specifications, extending the application of mutation testing from program testing to specification testing. It effectively defines a set of mutation operators that aid in identifying and modeling errors in SDL specifications, thus demonstrating the relevance and effectiveness of mutation testing in this context.",2004,TestCom 2004,"Specification Testing, Mutation Testing, SDL",,,,,,,,
Model-based mutation testing—Approach and case studies,"Fevzi Belli, Christof J. Budnik, Axel Hollmann, Tugkan Tuglular, W. Eric Wong","This paper rigorously introduces the concept of model-based mutation testing (MBMT) and positions it in the landscape of mutation testing. Two elementary mutation operators, insertion and omission, are exemplarily applied to a hierarchy of graph-based models of applications. The study evaluates the fault detection capability of test sets generated based on the mutated models. Three case studies on industrial and commercial real-life systems demonstrate the feasibility of the proposed MBMT approach in detecting faults.",Journal Article,"1,3,2",Include,"The paper presents a novel approach to mutation testing, which fulfills the criteria related to mutation testing strategy (criterion 1), measurement of mutation testing effectiveness (criterion 3), and implicitly touches upon security evaluation as it discusses fault detection in software (criterion 2). The comprehensive discussion and application of the MBMT in various case studies demonstrate its relevance and potential impact on software testing processes.",2016,Science of Computer Programming,"Mutation testing, Model-based testing, Model-based mutation testing, Mutation operator, Fault detection capability",https://doi.org/10.1016/j.scico.2016.01.003,,,,,,,
Assessing Test Quality,David Schuler,"When developing tests, one is interested in creating tests of good quality that thoroughly test the program. This work shows how to assess test quality through mutation testing with impact metrics, and through checked coverage. Although there are different aspects that contribute to a test’s quality, the most important factor is its ability to reveal defects, because software testing is usually carried out with the aim to detect defects. For this purpose, a test has to provide inputs that execute the defective code under such conditions that it causes an infection. This infection has to propagate and result in a failure, which can be detected by a check of the test. In the past, the aspect of test input quality has been extensively studied while the quality of checks has received less attention. The traditional way of assessing the quality of a test suite’s checks is mutation testing. Mutation testing seeds artificial defects (mutations) into a program, and checks whether the tests detect them. While this technique effectively assesses the quality of checks, it also has two drawbacks. First, it places a huge demand on computing resources. Second, equivalent mutants, which are mutants that are semantically equivalent to the original program, dilute the quality of the results. In this work, we address both of these issues. We present the JAVALANCHE framework that applies several optimizations to enable automated and efficient mutation testing for real-life programs. Furthermore, we address the problem of equivalent mutants by introducing impact metrics to detect non-equivalent mutants. Impact metrics compare properties of tests suite runs on the original program with runs on mutated versions, and are based on abstractions over program runs such as dynamic invariants, covered statements, and return values. The intention of these metrics is that mutations that have a graver influence on the program run are more likely to be non-equivalent. Moreover, we introduce checked coverage, an alternative approach to measure the quality of a test suite’s checks. Checked coverage determines the parts of the code that were not only executed, but that actually contribute to the results checked by the test suite, by computing dynamic backwards slices from all explicit checks of the test suite.",Dissertation,"This paper is significantly related to mutation testing strategies through its exploration of mutation testing efficiency via the JAVALANCHE framework and its impact metrics. Furthermore, it evaluates the effectiveness of these mutation testing strategies and assesses test quality, aligning with the criteria set for inclusion.",Include,"The document is deeply relevant to the review as it extensively addresses the mutation testing strategy criterion by presenting the JAVALANCHE framework, leveraging mutation testing impact metrics, and discussing the measurement of mutation testing effectiveness through checked coverage. While not explicitly focusing on security evaluation of applications, its focus on mutation testing efficiency and effectiveness measurement directly aligns with the review criteria, justifying its inclusion.",2011,Universität des Saarlandes,"Mutation testing, test quality, JAVALANCHE, equivalent mutants, impact metrics, checked coverage",https://doi.org/10.22028/D291-20421,,,,,,,
Semi-Automatic Security Testing of Web Applications from a Secure Model,"Matthias Büchler, Johan Oudinet, Alexander Pretschner","Web applications are a major target of attackers. The increasing complexity of such applications and the subtlety of today's attacks make it very hard for developers to manually secure their web applications. Penetration testing is considered an art; the success of a penetration tester in detecting vulnerabilities mainly depends on his skills. Recently, model-checkers dedicated to security analysis have proved their ability to identify complex attacks on web-based security protocols. However, bridging the gap between an abstract attack trace output by a model-checker and a penetration test on the real web application is still an open issue. We present here a methodology for testing web applications starting from a secure model. First, we mutate the model to introduce specific vulnerabilities present in web applications. Then, a model-checker outputs attack traces that exploit those vulnerabilities. Next, the attack traces are translated into concrete test cases by using a 2-step mapping. Finally, the tests are executed on the real system using an automatic procedure that may request the help of a test expert from time to time. A prototype has been implemented and evaluated on WebGoat, an insecure web application maintained by OWASP. It successfully reproduced Role-Based Access Control (RBAC) and Cross-Site Scripting (XSS) attacks.",Conference Paper,"The paper discusses a methodology involving mutation testing to identify security vulnerabilities in web applications, aligns with the first and second criteria of mutation testing strategy, and security evaluation of applications. It does not focus explicitly on measuring the effectiveness of mutation testing.",Include,"The paper presents a novel methodology for testing web applications' security starting from a secure model and introducing specific vulnerabilities using mutation testing. This approach is relevant to criteria 1 and 2, addressing mutation testing strategy and security evaluation of applications. While it does not measure the effectiveness of mutation testing directly, it provides a practical application of mutation to facilitate security testing, justifying its inclusion in the systematic review.",2012,IEEE Sixth International Conference on Software Security and Reliability,"Mutation testing, Security testing, Web applications, Model checking, Vulnerability analysis",https://doi.org/10.1109/SERE.2012.38,,,,,,,
Research on Software Security Testing,"Gu Tian-yang, Shi Yin-sheng, Fang You-yuan","Software security testing is an important means to ensure software security and trustiness. This paper first discusses the definition and classification of software security testing and investigates methods and tools of software security testing widely. Then it analyzes and concludes the advantages and disadvantages of various methods and the scope of application, presents a taxonomy of security testing tools. Finally, the paper points out future focus and development directions of software security testing technology.",Scientific Paper,The paper is relevant to the 'Security evaluation of applications' criterion as it extensively discusses software security testing methods and tools. It does not cover mutation testing strategies or specifically measure the effectiveness of mutation testing.,No,"The paper focuses solely on software security testing strategies and tools. There is no mention of mutation testing strategy or any assessment of mutation testing effectiveness, which are critical for inclusion based on the set criteria.",2010,"World Academy of Science, Engineering and Technology","security testing, vulnerability testing, testing method, testing tool",,,,,,,,
A Robustness Testing Approach for RESTful Web Services,João André Nunes Agnelo,"The document presents a robustness testing approach for RESTful web services, emphasizing the need for robustness in handling invalid inputs or stressful environments. It introduces bBOXRT, a tool designed to test the robustness of REST services using minimal information from interface descriptions. The study evaluates multiple REST services, identifying various robustness issues and some security vulnerabilities.",Dissertation,No direct connection to mutation testing strategy or measurement of mutation testing effectiveness. The study emphasizes robustness and security evaluation but not mutation testing.,Exclude,"The document is focused on robustness testing for RESTful web services, emphasizing robustness and security evaluation rather than mutation testing strategies or measurement of mutation testing effectiveness. Thus, it does not meet the criteria for inclusion.",2020,"Faculty of Sciences and Technology, Department of Informatics Engineering","Software testing, software robustness, robustness evaluation, web services, RESTful web services, REST API",,,,,,,,
SPaCiTE - Web Application Testing Engine,"Matthias Bu¨chler, Johan Oudinet, Alexander Pretschner","Web applications and web services enjoy an ever-increasing popularity. Such applications have to face a variety of sophisticated and subtle attacks. The difficulty of identifying respective vulnerabilities steadily increases with the complexity of applications. Moreover, the art of penetration testing predominantly depends on the skills of highly trained test experts. The difficulty to test web applications hence represents a daunting challenge to their developers. As a step towards improving security analyses, model checking has, at the model level, been found capable of identifying complex attacks and thus moving security analyses towards a push-button technology. In order to bridge the gap with actual systems, we present SPaCiTE. This tool relies on a dedicated model-checker for security analyses that generates potential attacks with regard to common vulnerabilities in web applications. Then, it semi-automatically runs those attacks on the System Under Validation (SUV) and reports which vulnerabilities were successfully exploited. We applied SPaCiTE to Role-Based-Access-Control (RBAC) and Cross-Site Scripting (XSS) lessons of WebGoat, an insecure web application maintained by OWASP. The tool successfully reproduced RBAC and XSS attacks.",Conference Paper,"Criteria 2: The paper discusses a security evaluation tool called SPaCiTE that tests vulnerabilities in web applications. While it does not cover mutation testing strategy or measure mutation testing effectiveness, it provides valuable insights into security evaluation.",Exclude,"The paper focuses on a tool for security testing of web applications and does not address mutation testing strategies or measure their effectiveness. It solely fulfills Criterion 2, whereas a systematic review should involve studies relevant to all mentioned criteria for comprehensive inclusion.",2012,"IEEE Fifth International Conference on Software Testing, Verification and Validation","Model Checking, Web Security, Penetration Testing, RBAC, XSS, Vulnerability Scanners"," ""10.1109/ICST.2012.187""",,,,,,,
Milcom 2016 Track 3 - Cyber Security and Trusted Computing,"Jin-Hee Cho, Patrick M. Hurley, Shouhuai Xu",,Conference,"The paper does not directly address mutation testing strategy, nor does it measure the effectiveness of mutation testing as a method.",Exclude,"The paper focuses on developing a metric framework for assessing system trustworthiness, especially in terms of trust, resilience, and agility, in a cybersecurity context. While it is concerned with security evaluation, it does not address mutation testing strategies or specifically measure the effectiveness of mutation testing. Instead, it involves the framework TRAM, which deals with measuring trustworthiness related to system security and performance, rather than applying mutation testing to evaluate these aspects.",2016,MILCOM,"metrics, measurement, trustworthy systems, trustworthiness, agility, resilience, threat, vulnerability",,,,,,,,
Semantic mutation testing,"John A. Clark, Haitao Dan, Robert M. Hierons","Mutation testing is a powerful and flexible test technique. Traditional mutation testing makes a small change to the syntax of a description (usually a program) in order to create a mutant. A test suite is considered to be good if it distinguishes between the original description and all of the (functionally non-equivalent) mutants. These mutants can be seen as representing potential small slips and thus mutation testing aims to produce a test suite that is good at finding such slips. It has also been argued that a test suite that finds such small changes is likely to find larger changes. This paper describes a new approach to mutation testing, called semantic mutation testing. Rather than mutate the description, semantic mutation testing mutates the semantics of the language in which the description is written. The mutations of the semantics of the language represent possible misunderstandings of the description language and thus capture a different class of faults. Since the likely misunderstandings are highly context dependent, this context should be used to determine which semantic mutants should be produced. The approach is illustrated through examples with statecharts and C code. The paper also describes a semantic mutation testing tool for C and the results of experiments that investigated the nature of some semantic mutation operators for C.",Journal Article,"1,3,The paper discusses a new approach to mutation testing, specifically focusing on the semantic mutation testing strategy and its effectiveness. It addresses the mutation testing strategy by presenting semantic mutation as an alternative to traditional mutation testing which entails creating mutants by changing the description's syntax. It showcases how semantic mutations can capture different fault classes, which aids in producing a test suite that measures testing effectiveness against semantic misunderstandings.",Include,"This paper should be included in the systematic review because it provides an in-depth examination of a mutation testing strategy that changes the semantics, investigates the effectiveness of this strategy, and introduces a tool for C code. This aligns well with criteria 1 and 3 for the systematic review.",2013,Science of Computer Programming,"Mutation Testing, Semantics, Testing Effectiveness, Software Security, Semantic Mutation",https://doi.org/10.1016/j.scico.2011.03.011,,,,,,,
Testing with model checkers: a survey,"Gordon Fraser, Franz Wotawa, Paul E. Ammann","About a decade after the initial proposal to use model checkers for the generation of test cases we take a look at the results in this field of research. Model checkers are formal verification tools, capable of providing counterexamples to violated properties. Normally, these counterexamples are meant to guide an analyst when searching for the root cause of a property violation. They are, however, also very useful as test cases. Many different approaches have been presented, many problems have been solved, yet many issues remain. This survey paper reviews the state of the art in testing with model checkers.",Scientific Paper,"The paper discusses using model checkers for testing and describes different techniques, including mutation-based approaches, which align with the mutation testing strategy. The paper doesn't focus specifically on security evaluation of applications or measurement of mutation testing effectiveness, thus partially meeting the criteria.",Include,"The paper explores model checkers and their applicability in testing, including mutation-based coverage, which aligns with mutation testing strategy. However, it doesn’t cover security evaluation or precisely measure mutation testing effectiveness. Hence, it's included because it provides valuable information on mutation testing.",2009,"Software Testing, Verification & Reliability","automated testing, model checking, test case generation, software testing",https://doi.org/10.1002/stvr.402,,,,,,,
Lightweight State Based Mutation Testing for Security,"Songtao Zhang, Thomas Dean, Scott Knight","State based protocols are protocols in which the handling of one message depends on the contents of previous messages. Testing such protocols, for security or for other purposes usually means specifying the state space of the protocol in some manner. This paper introduces a novel method of using an existing client to explore the state space. The messages exchanged between the client and test system are captured and mutated. To send the mutated test messages, the previous messages must be resent. Constraints expressed in an extended version of the Semantic Constraint Language are used to automatically derive the data dependencies between the messages. This paper presents a novel way of manipulating the state of the application under test without having to fully specify the state space of the protocol.",Conference Paper,"This paper is relevant to criteria 1 and 2, focusing on mutation testing strategy for security evaluation of applications.",Include,"The paper introduces a novel mutation testing strategy that specifically addresses state-based protocols and security evaluations. It explores mutation testing as a way to assess the security of network protocols, aligning with the criteria of mutation testing strategy and security evaluation of applications. While it does not directly measure the effectiveness of mutation testing, its novel approach to state manipulation for security testing justifies its inclusion under the specified broad criteria.",2007,IEEE International Conference on Practice and Research Techniques,"Mutation testing, Security evaluation, State-based protocols, Semantic Constraint Language, Network security",https://doi.org/10.1109/TAIC.PART.2007.31,,,,,,,
The Framework for Android Apps Testing using Mutation Technique,"Muhammad Arshad Javed, Rosziati Ibrahim, Jahari Abdul Wahab","This paper presents the framework for Android apps testing using mutation technique. A systematic comparative analysis is done based on various approaches and techniques for mutation testing. The analysis examines the development of research on this subject and its inspiring objectives and practices. Using comparative analysis, the framework exhibits that Android mutation testing can create assessment cases that are very efficient at distinguishing both naturally occurring errors and crowd-sourced errors for Android apps. The framework can be used as a basis to test the Android apps using mutation techniques.",Conference Paper,The paper is relevant to criteria 1 and 3 as it covers 'Mutation testing strategy' and the 'Measurement of mutation testing effectiveness' for Android apps.,Include,"The paper presents a framework that applies the mutation technique specifically to Android apps, providing insights into creating efficient assessment cases. It addresses both the development and the measurement of effectiveness of mutation testing, which aligns with two of the systematic review's inclusion criteria.",2020,IOP Conference Series: Materials Science and Engineering,"Mutation testing, Android apps, Mutation technique, Comparative analysis",https://doi.org/10.1088/1757-899X/917/1/012085,,,,,,,
"Using Model-Checkers for Mutation-Based Test-Case Generation, Coverage Analysis and Specification Analysis","Gordon Fraser, Franz Wotawa","Automated software testing is an important measure to improve software quality and the efficiency of the software development process. We present a model-checker based approach to automated test-case generation applying mutation to behavioral models and requirements specifications. Unlike previous related approaches, the requirements specification is at the center of this process. A property coverage criterion is used to show that resulting test-cases sufficiently exercise all aspects of the specification. A test-suite derived from the specification can only be as good as the specification itself. We demonstrate that analysis of the test-case generation process reveals important details about the specification, such as vacuity and how much of the model it covers, without requiring additional costly computations.",Conference Paper,"Relevance to Criteria: The paper discusses a mutation-based approach for test-case generation and coverage analysis, focusing on specifications. While it mentions mutation testing and measurement of testing effectiveness, it does not detail a direct evaluation of application security.",Include,"The paper addresses mutation testing strategy by applying mutation to both models and specifications to generate test cases, as well as measuring the effectiveness of these tests via coverage analysis, which aligns with systematic review criteria 1 and 3. Although it does not directly address security evaluation of applications, the focus on mutation testing and specification analysis justifies its inclusion for a broad interpretation.",2006,ICSEA (International Conference on Software Engineering Advances),"Model-checking, Mutation testing, Automated testing, Software quality, Specification analysis",https://ieeexplore.ieee.org/document/xxxxxxx,,,,,,,
Design and Implementation of RESTFUL API for Vulnerability Detection and Mitigation,"Bhavya Modi, Uday Chourasia, Rajeev Pandey","With the rapid rise of online applications in the contemporary digital world, security concerns are also developing day by day. A web application is a collection of several web pages kept on a server. It is stated that as the economy grows, so will the security risks. There are numerous current web vulnerabilities that are still a significant concern, and with time, there will be much more new vulnerability that emerges as technology advances. In this paper, there is a detailed study of various web threats, i.e., vulnerabilities that are emerging and proposed a system that detects those vulnerabilities, resolves them for the user, and generates a user log for the administrator to monitor the type of vulnerabilities. In the proposed model, we have generated the system in the format of API. In the testing phase we've detected various web vulnerabilities such as SQL Injections, Cross-Site Scripting, Session Hijacking, Unauthorized access, Middle man attack, etc.",Conference Paper,"The paper primarily focuses on detection and mitigation of vulnerabilities in web applications; although related to security evaluation, it does not address mutation testing strategy or measure the effectiveness of mutation testing.",Exclude,"The paper discusses a model and API for web security through vulnerability detection and mitigation, which fits within the broad context of security evaluation of applications. However, it does not cover mutation testing strategies or directly measure mutation testing effectiveness, which are essential criteria for this systematic review.",2022,3rd International Conference on Future of Engineering Systems and Technologies,"RESTFUL API, Vulnerability Detection, Security Evaluation, Web Application Security",https://doi.org/10.1088/1757-899X/1228/1/012010,,,,,,,
SQLMutation: A tool to generate mutants of SQL database queries,"Javier Tuya, Mª José Suárez-Cabal, Claudio de la Riva",We present a tool to automatically generate mutants of SQL database queries. The SQLMutation tool is available on the Web and can be accessed using two different interfaces: A Web application to interactively generate the mutants and a Web service that allows it to be integrated with other applications developed using different platforms.,Conference,"1. Mutation testing strategy: Yes, the paper focuses on mutation operators for SQL syntax and provides details about a tool to automate mutation testing for SQL. 2. Security evaluation of applications: No, the paper doesn’t directly address security evaluation. 3. Measurement of mutation testing effectiveness: Yes, the paper discusses mutation scores as a measure of test adequacy and provides examples of how the tool is used to assess test cases.",Include,"The paper introduces the SQLMutation tool, focusing on generating mutants for SQL database queries which directly pertains to the effectiveness of mutation testing strategies. It fits the first and third inclusion criteria, making it a relevant study for a systematic review on mutation testing.",2006,Second Workshop on Mutation Analysis (Mutation 2006 - ISSRE Workshops 2006),"Database testing, SQL testing, SQL query, Mutation operators",,,,,,,,
A systematic review on search based mutation testing,"Rodolfo Adamshuk Silva, Simone do Rocio Senger de Souza, Paulo Sérgio Lopes de Souza","Context: Search Based Software Testing refers to the use of meta-heuristics for the optimization of a task in the context of software testing. Meta-heuristics can solve complex problems in which an optimum solution must be found among a large amount of possibilities. The use of meta-heuristics in testing activities is promising because of the high number of inputs that should be tested. Previous studies on search based software testing have focused on the application of meta-heuristics for the optimization of structural and functional criteria. Recently, some researchers have proposed the use of SBST for mutation testing and explored solutions for the cost of application of this testing criterion. Objective: The objective is to identify how SBST has been explored in the context of mutation testing, how fitness functions are defined and the challenges and research opportunities in the application of meta-heuristic search techniques. Method: A systematic review involving 263 papers published between 1996 and 2014 examined the studies on the use of meta-heuristic search techniques for the optimization of mutation testing. Results: The results show meta-heuristic search techniques have been applied for the optimization of test data generation, mutant generation and selection of effective mutation operators. Five meta-heuristic techniques, namely Genetic Algorithm, Ant Colony, Bacteriological Algorithm, Hill Climbing and Simulated Annealing have been used in search based mutation testing. The review addressed different fitness functions used to guide the search. Conclusion: Search based mutation testing is a field of interest, however, some issues remain unexplored. For instance, the use of meta-heuristics for the selection of effective mutation operators was identified in only one study. The results have pointed a range of possibilities for new studies to be developed, i.e., identification of equivalent mutants, experimental studies and application to different domains, such as concurrent programs.",Journal Article,"1,2,3",Include,"The paper extensively discusses the use of meta-heuristic approaches for mutation testing, covering strategies, the security implications of more effective testing, and evaluating the effectiveness of mutation testing through different meta-heuristic methods. It aligns well with all three inclusion criteria for the systematic review, providing a comprehensive overview and methodological synthesis of relevant approaches.",2017,Information and Software Technology,"Mutation testing, Search based software testing, Meta-heuristic",http://dx.doi.org/10.1016/j.infsof.2016.01.017,,,,,,,
Security Testing: A Survey,"Michael Felderer, Matthias Büchler, Martin Johns, Achim D. Brucker, Ruth Breu, Alexander Pretschner","Identifying vulnerabilities and ensuring security functionality by security testing is a widely applied measure to evaluate and improve the security of software. Due to the openness of modern software-based systems, applying appropriate security testing techniques is of growing importance and essential to perform effective and efficient security testing. Therefore, an overview of actual security testing techniques is of high value both for researchers to evaluate and refine the techniques and for practitioners to apply and disseminate them. This chapter fulfills this need and provides an overview of recent security testing techniques. For this purpose, it first summarizes the required background of testing and security engineering. Then, basics and recent developments of security testing techniques applied during the secure software development life cycle, i.e., model-based security testing, code-based testing and static analysis, penetration testing and dynamic analysis, as well as security regression testing are discussed. Finally, the security testing techniques are illustrated by adopting them for an example three-tiered web-based business application.",Book Chapter,2.3,Include,"The paper is relevant to the systematic review criteria, specifically addressing security evaluation of applications and providing a comprehensive overview of security testing techniques, which is essential for assessing the effectiveness of mutation testing in security contexts. The document extensively covers security testing strategies and their application to software security validation, directly relating to the criteria of security evaluation and the potential measurement of mutation testing effectiveness within security testing contexts.",2016,"Elsevier - Advances in Computers, Volume 101","Security Testing, Software Security, Testing Techniques, Secure Software Development Life Cycle",http://dx.doi.org/10.1016/bs.adcom.2015.11.003,,,,,,,
The Future of API Security: The Adoption of APIs for Digital Communications and the Implications for Cyber Security Vulnerabilities,"Alison Munsch PhD, Peter Munsch MBA","Businesses and consumers need to have a robust Application Programming Interface (API) management and security program in place to ensure they are using the most updated policies to certify that these transactions are adequately secure. Technology vendors do provide API Management tools for Customers, and there are established API security standards for securing API transactions. Given the effort to keep APIs open and easy to implement for Business to Business (B2B) and Business to Consumer (B2C) communications, security standards must be part of API management. This research gathered data to investigate why APIs are vulnerable. The research explored the different perspectives among Customers with regards to their own professional experiences with developing private APIs for their organizations and compared it to the Cyber Security Vendor/Supplier segment that offer products and services to assist their Customers with API development, security, and management. The research found that API exploits are usually not detected while they are occurring and perspectives about security readiness are different by IT role. Some basic blocking and tackling fundamentals that can help any organization improve API security management are identified by this research.",Journal Article,"The document primarily focuses on API security vulnerabilities, offering insight into the security evaluation of applications. It provides data and analysis regarding the perceptions and effectiveness of current API security standards, but it does not specifically address mutation testing strategy or measure the effectiveness of mutation testing.",Exclude,"Though the paper discusses security evaluations related to API implementations, it does not specifically address mutation testing strategies or measure mutation testing effectiveness. Since the systematic review criteria focus on mutation testing and its effectiveness, this paper does not align closely with the specified criteria.",2021,Journal of International Technology and Information Management,application programming interface, api, security, software as a service, saas, hybrid cloud, open web application security project, owasp,https://scholarworks.lib.csusb.edu/jitim/vol29/iss3/2
Mutation Test Based on OWL-S Requirement Model,"Xiaojuan Wang, Ning Huang, Rui Wang","Abstract—When web services play more important roles in automatically through program testing engine, and finally software development, the corresponding software dedicated obtain the testing result and report. This paper proposes a new mutation testing method based on the requirement model presented by OWL-S, which not only improves the test efficiency, but also makes the test work undergoing automatically. How to define the mutant operators, generate mutants and test cases automatically according to the requirement model are discussed in detail by the author. Web Service Software, Requirement Model, Mutation Test, OWL-S",Conference,The paper is relevant to criterion 1: Mutation testing strategy and criterion 3: Measurement of mutation testing effectiveness.,Include,"This paper is centered on mutation testing strategies by introducing a new method based on the OWL-S requirement model, which automates the generation of mutant operators and test cases. This directly falls under mutation testing strategy. Furthermore, the paper discusses the evaluation of test case set efficiency, relating to the measurement of mutation testing effectiveness criterion. The focus is on improving test efficiency, which aligns well with the requirements for a systematic review on mutation testing.",2009,IEEE International Conference on Web Services,"Web Service Software, Requirement Model, Mutation Test, OWL-S",https://doi.org/10.1109/ICWS.2009.129,,,,,,,
"``""Testing RESTful APIs: A Survey""","AMID GOLMOHAMMADI, MAN ZHANG, ANDREA ARCURI","This document surveys the current state-of-the-art in testing RESTful APIs. It is based on an analysis of 92 scientific articles and categorizes the existing scientific work, discussing the current challenges and trends in RESTful API testing. Contributions from these articles are analyzed across several perspectives including existing approaches, tools, and challenges. Although RESTful APIs are crucial for modern applications, verifying them is difficult due to their reliance on network and external services. The survey reveals a significant interest and increase in research in this area from 2017 onwards.",Scientific Paper,"This document primarily focuses on surveying the state-of-the-art in testing RESTful APIs, detailing the challenges and progress in this domain. It does not directly primary focus on mutation testing strategy, security evaluation, or measurement of mutation testing effectiveness as required by the eligibility criteria.",Exclude,"The document lacks specific focus on mutation testing strategy, the effectiveness of mutation testing, and security evaluations of applications, which are essential criteria for inclusion in the systematic review. While insightful for REST API testing, it does not meet the required themes.",2023,ACM Transactions on Software Engineering Methodology,"survey, REST, API testing, review, web services",https://doi.org/10.1145/3617175,,,,,,,
"Using Model-Checkers for Mutation-Based Test-Case Generation, Coverage Analysis and Specification Analysis","Gordon Fraser, Franz Wotawa","Automated software testing is an important measure to improve software quality and the efficiency of the software development process. We present a model-checker based approach to automated test-case generation applying mutation to behavioral models and requirements specifications. Unlike previous related approaches, the requirements specification is at the center of this process. A property coverage criterion is used to show that resulting test-cases sufficiently exercise all aspects of the specification. A test-suite derived from the specification can only be as good as the specification itself. We demonstrate that analysis of the test-case generation process reveals important details about the specification, such as vacuity and how much of the model it covers, without requiring additional costly computations.",Conference Proceedings,"The paper demonstrates a mutation-based approach for test-case generation and coverage analysis, focusing on specification evaluation, which aligns well with the criteria of mutation testing strategy and measurement of mutation testing effectiveness. However, it does not directly assess security evaluation of applications.",Include,"The paper describes a method for automated test-case generation using mutation in behavioral models and specifications, explaining the process and its effectiveness in extracting test cases from model mutants. The paper's approach and analyses are significant to understanding the mutation testing's impact, as it measures property and specification vacuity as well as coverage analysis, directly aligning with the criteria focused on mutation strategy and effectiveness measurement.",2006,International Conference on Software Engineering Advances (ICSEA'06),"Mutation Testing, Automated Test-Case Generation, Model-Checkers, Specification Analysis, Coverage Analysis",https://ieeexplore.ieee.org/document/4015398,,,,,,,
Using model-checkers to generate and analyze property relevant test-cases,"Gordon Fraser, Franz Wotawa","Verification is applied to software as a proof method with respect to its requirements. Software testing is necessary because verification is often infeasible. Automation is desirable since the complexity and the effort involved are significant. However, automated software testing is commonly used to ensure confidence in the conformance of an implementation to an abstract model, not to its requirement properties. In this paper, we introduce the notion of property relevance of test-cases. Property relevant test-cases can be used to determine property violations. It is shown how to detect the properties relevant to a test-case. New coverage criteria based on property relevance are introduced. Automated generation of test-suites satisfying these criteria is also presented. Finally, feasibility is illustrated with an empirical evaluation.",Scientific Journal Article,2,Exclude,"The paper primarily focuses on using model-checkers for generating property-relevant test cases and introducing coverage criteria based on property relevance. Although it discusses automated testing and verification, it does not specifically address mutation testing strategies, security evaluation of applications, or directly measure the effectiveness of mutation testing, as required by the inclusion criteria.",2008,Software Quality Journal,"Property relevance, Software testing, Requirements traceability, Test-suite analysis, Model-checker based testing",https://doi.org/10.1007/s11219-007-9031-6,,,,,,,
Realistic Vulnerability Generation Via Pattern Mining and Deep Learning,"Yu Nong, Yuzhe Ou, Michael Pradel, Feng Chen, Haipeng Cai",,Conference Paper,Scientific Paper,No,"The paper introduces VULGEN, a tool for generating vulnerable samples rather than evaluating mutation testing strategies or their effectiveness. While the focus on vulnerabilities intersects with security evaluation, the paper aligns only loosely with systematic review criteria related to mutation testing.",2023,IEEE,"Vulnerability Generation, Deep Learning, Pattern Mining, Security Evaluation",,,,,,,,
Mutation Testing of “Go-Back” Functions Based on Pushdown Automata,"Fevzi Belli, Mutlu Beyazıt, Tomohiko Takagi, Zengo Furukawa","A go-back (GB) function for canceling recent user or system operations and going back to and resuming of previous state(s) is very often used regardless of the application domain. Therefore, faulty handling of them can cause severe damages in those applications. This paper proposes a mutation-based approach to testing GB functions modeled by pushdown automata. Novel mutation operators, recent coverage criteria, model-based testing, and a new algorithm for test case generation are introduced. A case study validates the approach and discusses its characteristics.",Conference Paper,"The paper provides a mutation-based approach to testing 'Go-Back' functions, including the proposal of novel mutation operators and test case generation methods. While it focuses on mutation testing, it doesn't directly measure mutation testing effectiveness. There is no specific aspect of security evaluation discussed.",Exclude,"Although the paper thoroughly discusses mutation testing through the introduction of novel operators and test generation methods, it does not explicitly measure the effectiveness of mutation testing itself nor does it focus any evaluation on security aspects of applications, which are part of the criteria for inclusion.",2011,"IEEE International Conference on Software Testing, Verification and Validation","go-back function, model-based testing, mutation testing, pushdown automata",https://doi.org/10.1109/ICST.2011.30,,,,,,,
Mutation-based Model Synthesis in Model Driven Engineering,"Sagar Sen, Benoit Baudry","With the increasing use of models for software development and the emergence of model-driven engineering, it has become important to build accurate and precise models that present certain characteristics. Model transformation testing is a domain that requires generating a large number of models that satisfy coverage properties (cover the code of the transformation or the structure of the metamodel). However, manually building a set of models to test a transformation is a tedious task and having an automatic technique to generate models from a metamodel would be very helpful. We investigate the synthesis of models based on plans. Each plan comprises of a sequence of model synthesis rules (or mutation operators) specified as Graph Grammar (GG) rules. These mutation operators are primitive GG rules, automatically obtained from any meta-model. Such plans can be evolved by various artificial intelligence techniques to generate useful models for different tasks including model transformation testing. To test a model transformation it is first necessary to give it input models that conform to a modeling language. It is tedious to construct these models by hand and hence there is a need for automatic model synthesis. Typically, in model transformation testing research the effectiveness of a test model generation technique is measured by its ability to detect faults injected into the tested model transformation. This artificial injection of faults in the model transformation to test the validity of a test model is known as a mutation analysis. Mutation analysis in model transformation testing is employed to validate effective test model synthesis methods.",Conference Paper,"1,3,1",Yes,"The paper focuses on mutation-based model synthesis, which includes mutation operators for models. It directly addresses the criteria for mutation testing strategy and provides measurement for mutation testing effectiveness through model transformation testing. Though the paper does not mention a direct application in a security context, the innovative approach for mutation testing can be vital for applications with security relevance, where model-driven engineering is applied.",2006,Second Workshop on Mutation Analysis (Mutation 2006 - ISSRE Workshops 2006),"Model Driven Engineering, Mutation Testing, Model Transformation, Software Testing",,,,,,,,
Towards Resource-Aware Security Testing of Software,SangKil Cha,"As software permeates every facet of life, it is imperative to assure the safety of software systems. Software vulnerabilities—exploitable software bugs—allow an attacker to destroy privacy, steal identities, and even extort money from victims. Therefore, software bugs must be discovered before an attacker can exploit them. This dissertation presents our work on mutational fuzzing, a software testing technique for finding software bugs. Specifically, we argue that the efficiency of mutational fuzzing can drastically change depending on its parameters, and thus, automatic parameter optimization can help in improving the fuzzing efficiency. We validate this argument by designing, implementing, and evaluating several systems that employ novel techniques optimizing parameter selection for mutational fuzzing. Our specific contributions are that (1) we precisely define fuzzing and its parameter space; (2) we analytically study the effectiveness of mutational fuzzing in terms of bug finding probability; (3) we then address three strategies in optimizing mutational fuzzing over the parameter space in terms of the number of bugs found; and (4) we finally show a post-fuzzing strategy that enables prioritizing security-relevant bugs under limited resources.",Dissertation,"The document is relevant to all three criteria: it discusses a mutation testing strategy through mutational fuzzing (criterion 1), includes a security evaluation of applications by identifying vulnerabilities through fuzzing (criterion 2), and measures mutation testing effectiveness in terms of bug-finding probability (criterion 3).",Include,"The document presents comprehensive coverage of all three systematic review inclusion criteria. The focus on mutational fuzzing as a mutation testing strategy addresses the review's interest in mutation testing. Moreover, the dissertation's emphasis on discovering and prioritizing security-related bugs aligns with assessing security evaluations, while its analytical approach to measuring the effectiveness of fuzz testing itself further supports its inclusion.",2015,Carnegie Mellon University,"Mutational Fuzzing, Software Testing, Security Bugs, Parameter Optimization, Vulnerability Discovery, Resource-Aware Testing",https://repository.cmu.edu/dissertations/86,,,,,,,
Towards Security Aware Mutation Testing,Thomas Loise,,Thesis,"The document addresses all three criteria: mutation testing strategy by proposing new mutation operators, security evaluation by assessing these mutations' impact on security vulnerabilities, and measuring effectiveness of mutation testing with experiments.",Include,"The thesis is highly relevant because it explores the integration of security into mutation testing strategies, presents empirical evaluations of mutation effectiveness with respect to security, and thus fulfills all inclusion criteria.",2017,Universite de Namur,"Security aware mutation testing, PIT mutation engine, Java programming, software security",https://researchportal.unamur.be,,,,,,,
SQLMutation: A tool to generate mutants of SQL database queries,"Javier Tuya, Mª José Suárez-Cabal, Claudio de la Riva",We present a tool to automatically generate mutants of SQL database queries. The SQLMutation tool is available on the Web and it can be accessed using two different interfaces: A Web application to interactively generate the mutants and a Web service that allows it to be integrated with other applications developed using different platforms.,Conference Paper,"The paper is relevant to the criteria of a mutation testing strategy and the measurement of mutation testing effectiveness. It describes the use of mutation testing for SQL database queries, discusses the effectiveness of different types of mutation operators, and analyses the mutation scores derived from testing SQL queries.",Include,"The paper provides a detailed explanation of a mutation testing strategy specifically for SQL database queries. It introduces a tool, SQLMutation, which generates mutants of SQL queries and provides empirical data on the effectiveness of these mutants in identifying faults. This is highly relevant for assessing and comparing mutation testing techniques, matching the first and third criteria for the systematic review.",2006,Mutation 2006 - ISSRE Workshops 2006,"Database testing, SQL testing, SQL query, Mutation operators",http://in2test.lsi.uniovi.es/sqlmutation,,,,,,,
A Review on Web Application Testing and its Current Research Directions,"D. Rajya Lakshmi, S. Suguna Mallika","Testing is an important part of every software development process on which companies devote considerable time and effort. The burgeoning web applications and their proliferating economic significance in the society made the area of web application testing an area of acute importance. The web applications generally tend to take faster and quicker release cycles making their testing very challenging. The main issues in testing are cost efficiency and bug detection efficiency. Coverage-based testing is the process of ensuring exercise of specific program elements. Coverage measurement helps determine the “thoroughness” of testing achieved. An avalanche of tools, techniques, frameworks came into existence to ascertain the quality of web applications. A comparative study of some of the prominent tools, techniques and models for web application testing is presented. This work highlights the current research directions of some of the web application testing techniques.",Journal,"Relevance to mutation testing strategy: High. Presence of various models and techniques for testing, including mutation testing. Relevance to security evaluation of applications: Medium. Security testing is discussed, but not a primary focus. Relevance to measurement of mutation testing effectiveness: Medium. Mutation testing is discussed as a technique but not in relation to effectiveness measurement.",Include,"This paper provides an overview of various testing methodologies for web applications, including mutation testing, which is directly aligned with the first criterion. Although security evaluation is not the primary focus, the paper does discuss the importance of security within the context of web application testing challenges. The measurement of mutation testing effectiveness is indirectly addressed through the discussion of mutation testing techniques in web applications.",2017,International Journal of Electrical and Computer Engineering (IJECE),"Automated testing, Coverage testing, Testing techniques, Testing tools, Web application testing",http://iaesjournal.com/online/index.php/IJECEIJECE ISSN: 2088-8708,,,,,,,
Ori: A Greybox Fuzzer for SOME/IP Protocols in Automotive Ethernet,"Yuekang Li, Hongxu Chen, Cen Zhang, Siyang Xiong, Chaoyi Liu, Yi Wang","With the emergence of smart automotive devices, data communication between these devices gains increasing importance. SOME/IP is a light-weight protocol to facilitate inter-process/device communication, supporting both procedural calls and event notifications. Because of its simplicity and capability, SOME/IP is increasingly adopted by automotive devices, thus making its security crucial. However, previous security testing techniques cannot fit the scenario of vulnerability detection for SOME/IP applications due to challenges such as the difficulty of server-side testing in parallel. We propose Ori — a greybox fuzzer for SOME/IP applications, featuring two key innovations: attach fuzzing mode and structural mutation. Attach fuzzing mode enables Ori to test server programs efficiently, and structural mutation allows Ori to generate valid SOME/IP packets to reach deep paths of the target program effectively. Our evaluation shows that Ori can detect vulnerabilities in SOME/IP applications effectively and efficiently.",Conference Proceeding,"The paper focuses primarily on security evaluation through fuzz testing, tailored for SOME/IP protocols. It develops a greybox fuzzer, Ori, for vulnerability detection in automotive Ethernet protocols. While it does not explicitly focus on mutation testing strategy and effectiveness measurement as defined in classical mutation testing frameworks, it provides an innovative approach to mutation through 'structural mutation', which may be relevant when interpreted broadly in the context of mutation testing effectiveness.",Include,"While not a classical mutation testing study, the paper introduces 'structural mutation' to improve the fuzzing process. Its inclusion is justified under a broad interpretation of mutation testing as it contributes to the effectiveness of the mutation process, an integral part for assessing security vulnerabilities in applications.",2020,27th Asia-Pacific Software Engineering Conference (APSEC),"Greybox Fuzzer, Automotive Ethernet, SOME/IP Protocols, Structural Mutation, Security Testing",https://doi.org/10.1109/APSEC51365.2020.00063,,,,,,,
API Security Testing: The Challenges of Security Testing for Restful APIs,"Sattam J Alharbi, Tarek Moulahi",-,Conference Paper,"The paper focuses extensively on security testing for RESTful APIs, assessing vulnerabilities such as input validation and authentication, which are directly related to the security evaluation of applications. However, it does not discuss mutation testing strategies or measure mutation testing effectiveness.",Exclude,"The document centers on the security challenges and measures for RESTful APIs without covering mutation testing strategies or effectiveness, which are crucial for meeting the systematic review's inclusion criteria. ",2023,International Journal of Innovative Science and Research Technology,API security testing, RESTful APIs, Security challenges, API security vulnerabilities, Security testing techniques, API security practices,-,,
A Survey of Prevent and Detect Access Control Vulnerabilities,Li Zhong,"Broken access control is one of the most common security vulnerabilities in web applications. These vulnerabilities are the major cause of many data breach incidents, which result in privacy concern and revenue loss. However, preventing and detecting access control vulnerabilities proactively in web applications could be difficult. Currently, these vulnerabilities are actively detected by bug bounty hunters post-deployment, which creates attack windows for malicious access. To solve this problem proactively requires security awareness and expertise from developers, which calls for systematic solutions. This survey targets to provide a structured overview of approaches that tackle access control vulnerabilities. It firstly discusses the unique feature of access control vulnerabilities, then studies the existing works proposed to tackle access control vulnerabilities in web applications.",Scientific Paper,The document does not directly address mutation testing strategies or the measurement of mutation testing effectiveness but focuses primarily on the evaluation and prevention of access control vulnerabilities in application security.,Exclude,"Though the paper addresses aspects of security evaluation related to web applications (criterion 2), it does not deal with mutation testing strategies or measures of testing effectiveness (criteria 1 and 3). Since these latter aspects are crucial for inclusion, the paper does not meet enough criteria for inclusion in the systematic review.",2023,Not specified,"Access control vulnerabilities, Web applications, Security evaluation, Systematic solutions",,,,,,,,
Evaluating fuzzing tools for automated testing of REST APIs using OpenAPI specification,Alexander Tokos,,Master Thesis,"The paper focuses on evaluating fuzzing tools for testing REST APIs, with an emphasis on security but does not directly address mutation testing strategy or measure mutation testing effectiveness.",Exclude,"While the paper discusses security evaluation of REST APIs, it does not cover mutation testing strategies or the effectiveness measurement of mutation testing, which are integral criteria for inclusion.",2023,Åbo Akademi University,,,,,,,,,
Mutation Operators for Specifications,"Paul E. Black, Vadim Okun, Yaacov Yesha","Abstract: Mutation analysis uses mutation operators to introduce small changes, or mutations, into the specification, producing mutant specifications. Better test sets are those which reveal more mutants. This paper describes a larger set of mutation operators, compares their effectiveness, and recommends sets of mutation operators for good test coverage at reduced cost.",Scientific Paper,"1. Mutation testing strategy: Yes. The paper defines and evaluates a set of mutation operators for formal specifications, which directly relates to mutation testing strategies. 2. Security evaluation of applications: No. The paper does not address security evaluations of applications. 3. Measurement of mutation testing effectiveness: Yes. It measures the effectiveness of different mutation operators both theoretically and empirically.",Include,The paper fulfills two of the systematic review criteria: it thoroughly discusses mutation testing strategies by introducing specific mutation operators and it evaluates their effectiveness in detecting faults in specification-based testing.,2000,IEEE Conference,"Mutation Testing, Software Engineering, Model Checking",https://en.wikipedia.org/wiki/Mutation_testing_(software_engineering),,,,,,,
Web Mutation Testing,Upsorn Praphamontripong,"Abstract—Web application software uses new technologies testing so that web developers and testers can use web mutation testing to test their web applications more efficiently in terms of time spent and number of tests needed. Although powerful, these bring in new problems that current testing techniques do not adequately test for. Testing individual web software components in isolation cannot detect interaction faults, which occur in communication among web software components. Improperly implementing and testing Web applications are software applications constructed from diverse, distributed, and dynamically generated web software components. Web applications may use multiple web components. In addition to techniques used in traditional software, many new technologies have been used to develop web applications, control execution flow, and manage the state of web applications. These innovations allow web applications to provide a variety of services that can evolve and be released to respond to users’ needs more rapidly than traditional software applications. While these web development techniques are powerful and enhance the functionality of web applications, they introduce new challenges in testing. As mutation analysis has been shown to be effective in testing traditional software, the proposed project will investigate the usefulness of applying mutation testing to web applications. In a preliminary study, several new web mutation operators were defined specifically for web interaction faults.",Conference Paper,"1, 3",Include,"The paper's focus on mutation testing strategies for web applications directly aligns with criteria 1 (Mutation testing strategy) and indirectly with criteria 3 (Measurement of mutation testing effectiveness). The study discusses the application of mutation testing to identify web interaction faults and evaluates the effectiveness of this strategy through experimental methods, fulfilling the broad interpretation of the criteria for relevant studies.",2012,"IEEE Fifth International Conference on Software Testing, Verification and Validation",Mutation testing, web application, interaction faults,,,,,,
"``""Using model-checkers to generate and analyze property relevant test-cases""","Gordon Fraser, Franz Wotawa","Verification is applied to software as a proof method with respect to its requirements. Software testing is necessary because verification is often infeasible. Automation is desirable since the complexity and the effort involved are significant. However, automated software testing is commonly used to ensure confidence in the conformance of an implementation to an abstract model, not to its requirement properties. In this paper, we introduce the notion of property relevance of test-cases. Property relevant test-cases can be used to determine property violations. It is shown how to detect the properties relevant to a test-case. New coverage criteria based on property relevance are introduced. Automated generation of test-suites satisfying these criteria is also presented. Finally, feasibility is illustrated with an empirical evaluation.",Scientific paper,"3,1,2",Exclude,"This paper primarily focuses on using model checkers to generate property-relevant test cases and analyzing the property relevance of test cases using coverage criteria. It does describe an empirical evaluation of effectiveness, which could relate to criterion 3. However, it does not specifically address mutation testing strategy (criterion 1) or the security evaluation of applications (criterion 2). The topics are limited to model-checking and property-relevance in testing, without a particular emphasis on mutation testing or application security.",2008,Software Quality Journal,"Property relevance, Software testing, Requirements traceability, Test-suite analysis, Model-checker based testing",https://doi.org/10.1007/s11219-007-9031-6``,,,,,,,
Mutation Testing of “Go-Back” Functions Based on Pushdown Automata,"Fevzi Belli, Mutlu Beyazıt, Tomohiko Takagi, Zengo Furukawa","A go-back (GB) function for canceling recent user or system operations and going back to and resuming of previous state(s) is very often used regardless of the application domain. This paper proposes a mutation-based approach to testing GB functions modeled by pushdown automata. Novel mutation operators, recent coverage criteria, and a new algorithm for test case generation are introduced. A case study validates the approach and discusses its characteristics.",Conference Paper,"This study presents a mutation-based approach to testing go-back functions in software using pushdown automata and introduces novel mutation operators for mutation testing. It also measures test effectiveness by proposing a new test generation algorithm, aligning with criteria (1) and (3). However, there is not a primary focus on the security evaluation of applications (Criterion 2).",Include,"The paper is highly relevant to mutation testing strategies and assessing mutation testing effectiveness in software configurations involving go-back functions, as it introduces novel mutation operators and a new test case generation algorithm. Although it does not directly cover security evaluation of applications, its contributions to mutation testing strategy and effectiveness justify its inclusion in the review.",2011,IEEE,"go-back function, model-based testing, mutation testing, pushdown automata",https://doi.org/10.1109/ICST.2011.30,,,,,,,
Mutation-based Model Synthesis in Model Driven Engineering,"Sagar Sen, Benoit Baudry","With the increasing use of models for software development and the emergence of model-driven engineering, it has become important to build accurate and precise models that present certain characteristics. Model transformation testing is a domain that requires generating a large number of models that satisfy coverage properties (cover the code of the transformation or the structure of the metamodel). However, manually building a set of models to test a transformation is a tedious task, and having an automatic technique to generate models from a metamodel would be very helpful. We investigate the synthesis of models based on plans. Each plan comprises a sequence of model synthesis rules (or mutation operators) specified as Graph Grammar (GG) rules. These mutation operators are primitive GG rules, automatically obtained from any metamodel. Such plans can be evolved by various artificial intelligence techniques to generate useful models for different tasks including model transformation testing.",Conference Paper,The paper discusses mutation operators and their use in model-driven engineering for synthesizing models. It doesn't directly involve security evaluation of applications but focuses heavily on 'mutation testing' strategy and effectiveness measurement in the context of model transformations.,Include,"The paper deals extensively with mutation testing strategies for model-driven engineering and the effectiveness of these strategies, which aligns with criteria 1 and 3. Although it does not explicitly address security evaluation, the exploration and validation of mutation testing effectiveness justify its inclusion given the broad interpretation of the criteria.",2006,Second Workshop on Mutation Analysis (Mutation 2006 - ISSRE Workshops 2006),"Mutation testing, Model Driven Engineering, Mutation operators, Model Synthesis, Graph Grammar",https://doi.org/10.1109/MUTATION.2006.11,,,,,,,
A Survey on Security Metrics,"MARCUS PENDLETON, RICHARD GARCIA-LEBRON, SHOUHUAI XU","The importance of security metrics can hardly be overstated. Despite the attention that has been paid by the academia, government, and industry in the past decades, this important problem stubbornly remains open. In this survey, we present a survey of knowledge on security metrics. The survey is centered on a novel taxonomy, which classifies security metrics into four categories: metrics for measuring the system vulnerabilities, metrics for measuring the defenses, metrics for measuring the threats, and metrics for measuring the situations. The insight underlying the taxonomy is that situations (or outcomes of cyberattack-defense interactions) are caused by certain threats (or attacks) against systems that have certain vulnerabilities (including human factors) and employ certain defenses. In addition to systematically reviewing the security metrics that have been proposed in the literature, we discuss the gaps between the state of the art and the ultimate goals.",Scientific Paper,2,Exclude,"The paper is primarily concerned with security metrics and systematically reviews the literature related to measuring system vulnerabilities, defenses, threats, and situations in a cybersecurity context. However, it does not directly address mutation testing strategy or the measurement of mutation testing effectiveness. The main focus is on a taxonomy of security metrics rather than the specifics of mutation testing or its effectiveness, which means it does not meet the systematic review criteria provided.",2004,ACM Journal Name,"Security Metrics, System Vulnerabilities, Cybersecurity, Defenses, Threats, Situations, Cyber Attack-Defense Interactions"," ""http://viXra.org/pdf/1705.0126v1.pdf""",,,,,,,
Mutation Testing of Access Control Policies,"Galina Cherneva, Pavlо Khalimov","One of the most important and integral components of modern computer security are access control systems. The objective of an access control system (ACS) is often described in terms of protecting system resources against inappropriate or unwanted user access. However, a large degree of sharing can interfere with the protection of resources, so a sufficiently detailed AC policy should allow selective exchange of information when, in its absence, sharing can be considered too risky in general. Erroneous configurations, faulty policies, as well as flaws in the implementation of software can lead to global insecurity. Identifying the differences between policy specifications and their intended functions is crucial because the correct implementation and enforcement of the policies of a particular application is based on the premise that the specifications of this policy are correct. As a result of the policy, the specifications presented by the models must undergo rigorous validation and legalization through systematic checks and tests to ensure that the specifications of the policies really correspond to the wishes of the creators. Verifying that access control policies and models are consistent is not a trivial and critical task. And one of the important aspects of such a check is a formal check for inconsistency and incompleteness of the model, and the security requirements of the policy, because the access control model and its implementation do not necessarily express policies that can also be hidden, embedded by mixing with direct access restrictions or another access control model.",Scientific Article,"This paper is directly relevant as it discusses a mutation testing strategy specifically for access control policies. It includes security evaluation and effectiveness measurement, focusing on verifying that policy specifications meet security requirements and validating them with mutation testing.",Include,"The paper covers mutation testing strategies, security evaluation, and measurement of effectiveness specifically for access control policies, aligning well with all the criteria for the systematic review.",2021,Advanced Information Systems,access control, access control system, mutation testing, access control testing, policy,https://doi.org/10.20998/2522-9052.2021.1.17,,,
Diversity of graph models and graph generators in mutation testing,"Oszkár Semeráth, Rebeka Farkas, Gábor Bergmann, Dániel Varró","""Whencustommodelingtoolsareusedfordesigningcomplexsafety-criticalsystems(e.g.,criticalcyber-physicalsystems), thetoolsthemselvesneedtobevalidatedbysystematictestingtopreventtool-specificbugsreachingthesystem.Testingof suchmodelingtoolsreliesuponanautomaticallygeneratedsetofmodelsasatestsuite.Whilemanysoftwaretestingpractices recommendthatthistestsuiteshouldbediverse,modeldiversityhasnotbeenstudiedsystematicallyforgraphmodels.Inthe paper,weproposedifferentdiversitymetricsformodelsbygeneralizingandexploitingneighborhoodandpredicateshapes as abstraction. We evaluate such shape-based diversity metrics using various distance functions in the context of mutation testingofgraphconstraintsandaccesspoliciesfortwoseparateindustrialDSLs.Furthermore,weevaluatethequality(i.e., bugdetectioncapability)ofdifferent(randomandconsistent)modelgenerationtechniquesformutationtestingpurposes.""",Journal Article,1.3,Include,"The paper directly addresses two major criteria of the systematic review: mutation testing strategy and measurement of mutation testing effectiveness. It presents diverse metrics for evaluating models in mutation testing setups, explicitly measures the effectiveness using mutation score, and investigates questions on effective test suite generation in mutation testing. Although it doesn't directly focus on security evaluation, it discusses access control policies as a secondary case study.",2020,International Journal on Software Tools for Technology Transfer,"Model diversity, Mutation testing, Shape analysis",https://doi.org/10.1007/s10009-019-00530-6,,,,,,,
