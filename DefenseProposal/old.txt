
%\begin{frame}{Mutation Testing}
%\begin{figure}
%    \centering
%    \includegraphics[scale=0.5]{images/mutationtesting.png}
%    \caption{Mutation testing process \cite{Offutt2001}}
%\end{figure}
%\end{frame}

\begin{frame}{Mutation Testing}
\begin{figure}
    \centering
    \includegraphics[scale=0.8]{images/publications.png}
    \caption{Publications in mutation testing}
\end{figure}
\end{frame}

\begin{frame}{Mutation Testing}
\begin{figure}
    \centering
    \includegraphics[scale=0.5]{images/statedia.png}
    \caption{Publications in mutation testing}
\end{figure}
\end{frame}


\begin{frame}{Mutation Testing}
Authors 2010-2020
\begin{itemize}
    \item Mike Papadakis (26)
    \item Jeff Offutt (22)
    \item Yves Le Traon (21)
    \item Jun Zhang (18)
    \item Shahryar Rahnamayan (13)
    \item Lingming Zhang (12)
    \item Alex Groce (12)
    \item Franz Wotawa (12)
    \item Swagatam Das (12)
    \item Gregory M. Kapfhammer (11)
\end{itemize}


\end{frame}


\begin{frame}{Mutation Testing}
\begin{figure}
    \centering
    \includegraphics[scale=0.3]{images/redes.jpg}
    \caption{Authors in mutation testing}
\end{figure}

\end{frame}

\begin{frame}{Mutation Testing}
Open problems according to Papadakis\cite{Papadakis2019}
\begin{enumerate}
    \item Approximately 5\% of the mutants are useful
    \item Small semantic deviations vs blind syntactical deviations
    \item Mutations may be tailored to useful mutants
    \item Many redundant mutants
    \item Not strong evidence that the mutants are correlated with real faults
\end{enumerate}
\end{frame}

\begin{frame}{Mutation Testing}
Open problems according to Papadakis\cite{Papadakis2019}
\begin{enumerate}
    \setcounter{enumi}{5}
    \item What types of faults are not captured by simple or complex mutants? 
    \item What percentage of future regression errors can we capture with mutations? 
    \item When is it appropriate to stop the testing process? 
    \item How should we integrate mutation testing into our development process?
\end{enumerate}
\end{frame}

\begin{frame}{Mutation Testing}
Open problems according to Loise\cite{Loise2017}
\begin{enumerate}
    \item Collect security patterns in a database to create operators
    \item Operators to generate vulnerable versions of the software
    \item Creation of the security regression tests
\end{enumerate}
\end{frame}

\begin{frame}{Mutation Testing}
Open problems according to Literature Review
\begin{enumerate}
    \item Mutation operators are designed only for a specific cases
    \item The specification of mutation operators is only in high level 
    \item It is a big challenge to create mutation operators in different software
\end{enumerate}
\end{frame}

Model checkers to the genearatio of test cases.

Normally, these counterexamples are meant to guide an analyst when searching for the root cause of a property violation.


A model checker is a tool intended for formal verification. It takes as input an automaton-based model of a system and a temporal logic property, and then explores the state space of the system in order to determine whether the model satisfies the property

. The main challenge is to force the model checker to systematically create sets of such counterexamples.

Model-Based Mutation Testing Differing

A model is created that is supposed to be correct. 2. Mutants are generated from this (correct) model. 3. For each mutant o a set of test cases is generated, o these test
cases are executed on the implementation, and
o the observed behavior is compared against the behavior outlined by the mutant.
4. The results are interpreted to reveal faults in the implementation, depending on the mutant’s typuch as correct or incorrect) and the original correct model.
The following elements are necessary to form a
framework for model-based mutation testing: • A formal model • Mutation operators defined over the selected model • Test case generation method(s) defined over the selected model

The four fault categories introduced in Section III.C can
be produced by means of the following operators: Insertion (I), omission (O), and marking (M).